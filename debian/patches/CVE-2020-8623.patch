Index: bind9-9.10.3.dfsg.P4/lib/dns/pkcs11dh_link.c
===================================================================
--- bind9-9.10.3.dfsg.P4.orig/lib/dns/pkcs11dh_link.c	2020-08-27 14:53:10.195973806 +0200
+++ bind9-9.10.3.dfsg.P4/lib/dns/pkcs11dh_link.c	2020-08-27 14:53:10.187973199 +0200
@@ -23,6 +23,7 @@
 #include <isc/mem.h>
 #include <isc/string.h>
 #include <isc/util.h>
+#include <isc/safe.h>
 
 #include <dst/result.h>
 
@@ -740,6 +741,8 @@
 	CK_BYTE *prime = NULL, *base = NULL, *pub = NULL;
 	CK_ATTRIBUTE *attr;
 	int special = 0;
+	unsigned int bits;
+	isc_result_t result;
 
 	isc_buffer_remainingregion(data, &r);
 	if (r.length == 0)
@@ -861,7 +864,13 @@
 	pub = r.base;
 	isc_region_consume(&r, publen);
 
-	key->key_size = pk11_numbits(prime, plen_);
+	result = pk11_numbits(prime, plen_, &bits);
+	if (result != ISC_R_SUCCESS) {
+		memset(dh, 0, sizeof(*dh));
+		isc_mem_put(key->mctx, dh, sizeof(*dh));
+		return (result);
+	}
+	key->key_size = bits;
 
 	dh->repr = (CK_ATTRIBUTE *) isc_mem_get(key->mctx, sizeof(*attr) * 3);
 	if (dh->repr == NULL)
@@ -1014,6 +1023,7 @@
 	dst_private_t priv;
 	isc_result_t ret;
 	int i;
+	unsigned int bits;
 	pk11_object_t *dh = NULL;
 	CK_ATTRIBUTE *attr;
 	isc_mem_t *mctx;
@@ -1084,7 +1094,12 @@
 
 	attr = pk11_attribute_bytype(dh, CKA_PRIME);
 	INSIST(attr != NULL);
-	key->key_size = pk11_numbits(attr->pValue, attr->ulValueLen);
+
+	ret = pk11_numbits(attr->pValue, attr->ulValueLen, &bits);
+	if (ret != ISC_R_SUCCESS) {
+		goto err;
+	}
+	key->key_size = bits;
 
 	return (ISC_R_SUCCESS);
 
Index: bind9-9.10.3.dfsg.P4/lib/dns/pkcs11dsa_link.c
===================================================================
--- bind9-9.10.3.dfsg.P4.orig/lib/dns/pkcs11dsa_link.c	2020-08-27 14:53:10.195973806 +0200
+++ bind9-9.10.3.dfsg.P4/lib/dns/pkcs11dsa_link.c	2020-08-27 14:53:10.187973199 +0200
@@ -974,6 +974,7 @@
 	dst_private_t priv;
 	isc_result_t ret;
 	int i;
+	unsigned int bits;
 	pk11_object_t *dsa = NULL;
 	CK_ATTRIBUTE *attr;
 	isc_mem_t *mctx = key->mctx;
@@ -1063,7 +1064,12 @@
 
 	attr = pk11_attribute_bytype(dsa, CKA_PRIME);
 	INSIST(attr != NULL);
-	key->key_size = pk11_numbits(attr->pValue, attr->ulValueLen);
+
+	ret = pk11_numbits(attr->pValue, attr->ulValueLen, &bits);
+	if (ret != ISC_R_SUCCESS) {
+		goto err;
+	}
+	key->key_size = bits;
 
 	return (ISC_R_SUCCESS);
 
Index: bind9-9.10.3.dfsg.P4/lib/dns/pkcs11rsa_link.c
===================================================================
--- bind9-9.10.3.dfsg.P4.orig/lib/dns/pkcs11rsa_link.c	2020-08-27 14:53:10.195973806 +0200
+++ bind9-9.10.3.dfsg.P4/lib/dns/pkcs11rsa_link.c	2020-08-27 15:04:33.267810730 +0200
@@ -27,6 +27,7 @@
 #include <isc/mem.h>
 #include <isc/string.h>
 #include <isc/util.h>
+#include <isc/safe.h>
 
 #include <dst/result.h>
 
@@ -288,6 +289,7 @@
 		key->key_alg == DST_ALG_NSEC3RSASHA1 ||
 		key->key_alg == DST_ALG_RSASHA256 ||
 		key->key_alg == DST_ALG_RSASHA512);
+	REQUIRE(maxbits <= RSA_MAX_PUBEXP_BITS);
 
 	rsa = key->keydata.pkey;
 
@@ -304,6 +306,7 @@
 	for (attr = pk11_attribute_first(rsa);
 	     attr != NULL;
 	     attr = pk11_attribute_next(rsa, attr))
+	{
 		switch (attr->type) {
 		case CKA_MODULUS:
 			INSIST(keyTemplate[5].type == attr->type);
@@ -324,12 +327,16 @@
 			memmove(keyTemplate[6].pValue, attr->pValue,
 				attr->ulValueLen);
 			keyTemplate[6].ulValueLen = attr->ulValueLen;
-			if (pk11_numbits(attr->pValue,
-					 attr->ulValueLen) > maxbits &&
-			    maxbits != 0)
+			unsigned int bits;
+			ret = pk11_numbits(attr->pValue, attr->ulValueLen,
+					   &bits);
+			if (ret != ISC_R_SUCCESS ||
+			    (bits > maxbits && maxbits != 0)) {
 				DST_RET(DST_R_VERIFYFAILURE);
+			}
 			break;
 		}
+	}
 	pk11_ctx->object = CK_INVALID_HANDLE;
 	pk11_ctx->ontoken = ISC_FALSE;
 	PK11_RET(pkcs_C_CreateObject,
@@ -795,6 +802,8 @@
 	CK_BYTE *exponent = NULL, *modulus = NULL;
 	CK_ATTRIBUTE *attr;
 	unsigned int length;
+	unsigned int bits;
+	isc_result_t ret = ISC_R_SUCCESS;
 
 	isc_buffer_remainingregion(data, &r);
 	if (r.length == 0)
@@ -832,7 +841,14 @@
 	modulus = r.base;
 	mod_bytes = r.length;
 
-	key->key_size = pk11_numbits(modulus, mod_bytes);
+	//org: key->key_size = pk11_numbits(modulus, mod_bytes);
+	ret = pk11_numbits(modulus, mod_bytes, &bits);
+	if (ret != ISC_R_SUCCESS) {
+		memset(rsa, 0, sizeof(*rsa));
+		isc_mem_put(key->mctx, rsa, sizeof(*rsa));
+		return (ret);
+	}
+	key->key_size = bits;
 
 	isc_buffer_forward(data, length);
 
@@ -1059,6 +1075,7 @@
 	pk11_object_t *pubrsa;
 	pk11_context_t *pk11_ctx = NULL;
 	isc_result_t ret;
+	unsigned int bits;
 
 	if (label == NULL)
 		return (DST_R_NOENGINE);
@@ -1143,7 +1160,11 @@
 
 	attr = pk11_attribute_bytype(rsa, CKA_MODULUS);
 	INSIST(attr != NULL);
-	key->key_size = pk11_numbits(attr->pValue, attr->ulValueLen);
+	ret = pk11_numbits(attr->pValue, attr->ulValueLen, &bits);
+	if (ret != ISC_R_SUCCESS) {
+		goto err;
+	}
+	key->key_size = bits;
 
 	return (ISC_R_SUCCESS);
 
@@ -1229,6 +1250,7 @@
 	CK_ATTRIBUTE *attr;
 	isc_mem_t *mctx = key->mctx;
 	const char *engine = NULL, *label = NULL;
+	unsigned int bits;
 
 	/* read private key file */
 	ret = dst__privstruct_parse(key, DST_ALG_RSA, lexer, mctx, &priv);
@@ -1372,12 +1394,22 @@
 
 	attr = pk11_attribute_bytype(rsa, CKA_MODULUS);
 	INSIST(attr != NULL);
-	key->key_size = pk11_numbits(attr->pValue, attr->ulValueLen);
+	ret = pk11_numbits(attr->pValue, attr->ulValueLen, &bits);
+	if (ret != ISC_R_SUCCESS) {
+		goto err;
+	}
+	key->key_size = bits;
 
 	attr = pk11_attribute_bytype(rsa, CKA_PUBLIC_EXPONENT);
 	INSIST(attr != NULL);
-	if (pk11_numbits(attr->pValue, attr->ulValueLen) > RSA_MAX_PUBEXP_BITS)
+
+	ret = pk11_numbits(attr->pValue, attr->ulValueLen, &bits);
+	if (ret != ISC_R_SUCCESS) {
+		goto err;
+	}
+	if (bits > RSA_MAX_PUBEXP_BITS) {
 		DST_RET(ISC_R_RANGE);
+	}
 
 	dst__privstruct_free(&priv, mctx);
 	memset(&priv, 0, sizeof(priv));
@@ -1412,6 +1444,7 @@
 	pk11_context_t *pk11_ctx = NULL;
 	isc_result_t ret;
 	unsigned int i;
+	unsigned int bits;
 
 	UNUSED(pin);
 
@@ -1506,12 +1539,22 @@
 
 	attr = pk11_attribute_bytype(rsa, CKA_PUBLIC_EXPONENT);
 	INSIST(attr != NULL);
-	if (pk11_numbits(attr->pValue, attr->ulValueLen) > RSA_MAX_PUBEXP_BITS)
+
+	ret = pk11_numbits(attr->pValue, attr->ulValueLen, &bits);
+	if (ret != ISC_R_SUCCESS) {
+		goto err;
+	}
+	if (bits > RSA_MAX_PUBEXP_BITS) {
 		DST_RET(ISC_R_RANGE);
+	}
 
 	attr = pk11_attribute_bytype(rsa, CKA_MODULUS);
 	INSIST(attr != NULL);
-	key->key_size = pk11_numbits(attr->pValue, attr->ulValueLen);
+	ret = pk11_numbits(attr->pValue, attr->ulValueLen, &bits);
+	if (ret != ISC_R_SUCCESS) {
+		goto err;
+	}
+	key->key_size = bits;
 
 	pk11_return_session(pk11_ctx);
 	memset(pk11_ctx, 0, sizeof(*pk11_ctx));
Index: bind9-9.10.3.dfsg.P4/lib/isc/include/pk11/internal.h
===================================================================
--- bind9-9.10.3.dfsg.P4.orig/lib/isc/include/pk11/internal.h	2020-08-27 14:53:10.195973806 +0200
+++ bind9-9.10.3.dfsg.P4/lib/isc/include/pk11/internal.h	2020-08-27 14:53:10.187973199 +0200
@@ -31,7 +31,8 @@
 
 CK_SLOT_ID pk11_get_best_token(pk11_optype_t optype);
 
-unsigned int pk11_numbits(CK_BYTE_PTR data, unsigned int bytecnt);
+isc_result_t
+pk11_numbits(CK_BYTE_PTR data, unsigned int bytecnt, unsigned int *bits);
 
 CK_ATTRIBUTE *pk11_attribute_first(const pk11_object_t *obj);
 
Index: bind9-9.10.3.dfsg.P4/lib/isc/pk11.c
===================================================================
--- bind9-9.10.3.dfsg.P4.orig/lib/isc/pk11.c	2020-08-27 14:53:10.195973806 +0200
+++ bind9-9.10.3.dfsg.P4/lib/isc/pk11.c	2020-08-27 14:53:10.187973199 +0200
@@ -901,13 +901,15 @@
 	return (token->slotid);
 }
 
-unsigned int
-pk11_numbits(CK_BYTE_PTR data, unsigned int bytecnt) {
+isc_result_t
+pk11_numbits(CK_BYTE_PTR data, unsigned int bytecnt, unsigned int *bits) {
 	unsigned int bitcnt, i;
 	CK_BYTE top;
 
-	if (bytecnt == 0)
-		return (0);
+	if (bytecnt == 0) {
+		*bits = 0;
+		return (ISC_R_SUCCESS);
+	}
 	bitcnt = bytecnt * 8;
 	for (i = 0; i < bytecnt; i++) {
 		top = data[i];
@@ -915,25 +917,41 @@
 			bitcnt -= 8;
 			continue;
 		}
-		if (top & 0x80)
-			return (bitcnt);
-		if (top & 0x40)
-			return (bitcnt - 1);
-		if (top & 0x20)
-			return (bitcnt - 2);
-		if (top & 0x10)
-			return (bitcnt - 3);
-		if (top & 0x08)
-			return (bitcnt - 4);
-		if (top & 0x04)
-			return (bitcnt - 5);
-		if (top & 0x02)
-			return (bitcnt - 6);
-		if (top & 0x01)
-			return (bitcnt - 7);
+                if (top & 0x80) {
+                        *bits = bitcnt;
+                        return (ISC_R_SUCCESS);
+                }
+                if (top & 0x40) {
+                        *bits = bitcnt - 1;
+                        return (ISC_R_SUCCESS);
+                }
+                if (top & 0x20) {
+                        *bits = bitcnt - 2;
+                        return (ISC_R_SUCCESS);
+                }
+                if (top & 0x10) {
+                        *bits = bitcnt - 3;
+                        return (ISC_R_SUCCESS);
+                }
+                if (top & 0x08) {
+                        *bits = bitcnt - 4;
+                        return (ISC_R_SUCCESS);
+                }
+                if (top & 0x04) {
+                        *bits = bitcnt - 5;
+                        return (ISC_R_SUCCESS);
+                }
+                if (top & 0x02) {
+                        *bits = bitcnt - 6;
+                        return (ISC_R_SUCCESS);
+                }
+                if (top & 0x01) {
+                        *bits = bitcnt - 7;
+                        return (ISC_R_SUCCESS);
+                }
 		break;
 	}
-	INSIST(0);
+	return (ISC_R_RANGE);
 }
 
 CK_ATTRIBUTE *
